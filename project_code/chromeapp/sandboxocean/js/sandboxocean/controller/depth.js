// Generated by CoffeeScript 1.6.2
(function() {
  var Depth,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Depth = (function() {
    function Depth(img) {
      var _this = this;

      this.img = img;
      this.getDepthLevelToDOA = __bind(this.getDepthLevelToDOA, this);
      this.convertDepthNameToDepthLevel = __bind(this.convertDepthNameToDepthLevel, this);
      this.getDepthLevelToInt = __bind(this.getDepthLevelToInt, this);
      this.getDepthLevelToString = __bind(this.getDepthLevelToString, this);
      this.getDepthLevel = __bind(this.getDepthLevel, this);
      this.render = __bind(this.render, this);
      this.animloop = __bind(this.animloop, this);
      this.setCanvas = __bind(this.setCanvas, this);
      this.depthInfo = [
        {
          name: "alpine",
          height: .1
        }, {
          name: "hill",
          height: .2
        }, {
          name: "field",
          height: .4
        }, {
          name: "beach",
          height: .5
        }, {
          name: "coast",
          height: .6
        }, {
          name: "ocean",
          height: .8
        }, {
          name: "deepSea",
          height: 1.0
        }
      ];
      if (!this.img.naturalWidth) {
        $(this.img).on("load", function() {
          _this.setCanvas();
          return _this.animloop();
        });
      } else {
        this.setCanvas();
        this.animloop();
      }
    }

    Depth.prototype.setCanvas = function() {
      this.canvas = document.createElement('canvas');
      this.canvas.id = 'canvasId';
      this.$img = $(this.img);
      this.canvas.width = this.img.width;
      this.canvas.height = this.img.height;
      return this.ctx = this.canvas.getContext('2d');
    };

    Depth.prototype.animloop = function() {
      requestAnimFrame(this.animloop);
      return this.render();
    };

    Depth.prototype.render = function() {
      if (this.ctx != null) {
        return this.ctx.drawImage(this.img, 0, 0, this.img.width, this.img.height);
      }
    };

    Depth.prototype.getDepthLevel = function(x, y) {
      var result, _ref;

      return result = (_ref = this.ctx) != null ? _ref.getImageData(x, y, 1, 1).data : void 0;
    };

    Depth.prototype.getDepthLevelToString = function(x, y) {
      var level, name;

      level = this.getDepthLevelToInt(x, y);
      return name = this.depthInfo[level].name;
    };

    Depth.prototype.getDepthLevelToInt = function(x, y) {
      var base, depth, height1, height2, i, level, _i, _len, _ref, _ref1;

      depth = (_ref = this.getDepthLevel(x, y)) != null ? _ref[0] : void 0;
      depth /= 255;
      level = -1;
      _ref1 = this.depthInfo;
      for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
        base = _ref1[i];
        height1 = 0;
        if (i >= 1) {
          height1 = this.depthInfo[i - 1].height;
        }
        height2 = base.height;
        if (height1 < depth && depth < height2) {
          level = i;
          break;
        }
      }
      return level;
    };

    Depth.prototype.convertDepthNameToDepthLevel = function(name) {
      var el, i, result, _i, _len, _ref;

      result = -1;
      _ref = this.depthInfo;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        el = _ref[i];
        if (el.name === name) {
          result = i;
          break;
        }
      }
      return result;
    };

    Depth.prototype.getDepthLevelToDOA = function(x, y, config) {
      var currentLevel, from, to;

      currentLevel = this.getDepthLevelToInt(x, y);
      from = this.convertDepthNameToDepthLevel(config.habitat.from);
      to = this.convertDepthNameToDepthLevel(config.habitat.to);
      if (currentLevel === -1) {
        return "not ready";
      }
      if (currentLevel < from) {
        return "over";
      }
      if (currentLevel > to) {
        return "under";
      }
      if (from <= currentLevel && currentLevel <= to) {
        return "between";
      }
    };

    return Depth;

  })();

  window.Depth = Depth;

}).call(this);

/*
//@ sourceMappingURL=depth.map
*/
