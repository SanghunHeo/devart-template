// Generated by CoffeeScript 1.6.2
(function() {
  var Creature,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Creature = (function() {
    function Creature(name, x, y) {
      this.name = name;
      this.selectItemFromName = __bind(this.selectItemFromName, this);
      this.death = __bind(this.death, this);
      this.birthAnimation = __bind(this.birthAnimation, this);
      this.birth = __bind(this.birth, this);
      this.initLocationChecker = __bind(this.initLocationChecker, this);
      this.initMove = __bind(this.initMove, this);
      this.initView = __bind(this.initView, this);
      this.config = this.selectItemFromName(this.name, creatureConfig).data;
      this.config.position.x = x;
      this.config.position.y = y;
      this.initView();
      this.initMove();
      this.initLocationChecker();
    }

    Creature.prototype.initView = function() {
      var bound;

      this.view = SpriteFactory.get().makeSprite(this.config.view.name);
      bound = this.view.getBounds();
      this.view.regX = bound.width * this.config.reg.x;
      this.view.regY = bound.height * this.config.reg.y;
      this.view.setTransform(0, 0, -this.config.scale.xy, this.config.scale.xy);
      this.view.x = this.config.position.x;
      return this.view.y = this.config.position.y;
    };

    Creature.prototype.initMove = function() {
      if (this.config.moveType === "movable") {
        return this.movable = new Movable(this);
      }
    };

    Creature.prototype.initLocationChecker = function() {
      this.locationChecker = new LocationChecker(this);
      $(this.locationChecker).on("over", this.death);
      return $(this.locationChecker).on("under", this.death);
    };

    Creature.prototype.birth = function() {
      var _ref;

      this.life = 1;
      if ((_ref = this.movable) != null) {
        _ref.birth();
      }
      stage.addChild(this.view);
      this.birthAnimation();
      return this;
    };

    Creature.prototype.birthAnimation = function() {
      switch (this.config.view.animateType) {
        case "sprite":
          this.view.alpha = 0;
          return TweenMax.to(this.view, 1, {
            alpha: 1
          });
        case "scale":
          this.view.scaleX = 0;
          this.view.scaleY = 0;
          return TweenMax.to(this.view, 10, {
            scaleX: this.config.scale.xy,
            scaleY: this.config.scale.xy
          });
      }
    };

    Creature.prototype.death = function() {
      var _ref,
        _this = this;

      this.life = 0;
      if ((_ref = this.movable) != null) {
        _ref.death();
      }
      TweenMax.to(this.view, 1, {
        alpha: 0,
        onComplete: function() {
          return stage.removeChild(_this.view);
        }
      });
      return this;
    };

    Creature.prototype.selectItemFromName = function(name, arr) {
      var i, item, _i, _len;

      for (i = _i = 0, _len = arr.length; _i < _len; i = ++_i) {
        item = arr[i];
        if (item.name === name) {
          return item;
        }
      }
    };

    return Creature;

  })();

  window.Creature = Creature;

}).call(this);

/*
//@ sourceMappingURL=Creature.map
*/
